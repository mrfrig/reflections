What happens when you initialize a repository? Why do you need to do it?

	When a repository is initialize git creates the neccesary files to keep
	track of the repository and its needed because without those files the 
	version control system can't keep track of the commits and changes made
	to the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different because this area only contains files that
	are going to be commited to the repository, the repository contains all the
	commits that have been made and the working directory contains the files of 
	the most recent commit.


How can you use the staging area to make sure you have one commit per logical
change?

	The staging area allows you to separate files that are going to be commited
	from the ones that aren't going to be commited, so if you made changes to
	a group of files but half of them constitute a logical change and the other
	half constitute a different logical change, then you can use the staging area
	to make different commits for the each of the logical changes. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are helpful when you have multiple versions af the same project that
	are different bya a major factor like language or it helps you try implementing
	new features in a program that you aren't sure if it's neccesary or it's gonna 
	work. Branches would help by giving you security that your main version it's 
	protected from any change that doesn't work in the other branches.

How do the diagrams help you visualize the branch structure?

	It helps to visualize the tree like structure of the project your working on.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It creates a new commit that contains the changes made in the two branches
	since they splitted. It is represented that way in the diagram because none
	of the commits of either of the two branches is deleted so the contain the same
	information as before and the commit created by the merge has two parents.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	pros:
		- It saves a lot of time because you don't have to keep doing merges manually
		wich could take a lot of time

	cons:
		- An automatic merge could break the code if the persons wrorkinng on the branches
		aren't careful
